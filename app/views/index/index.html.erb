<main id="barba-wrapper">
  <div class="barba-container">
    <div id="home" class="big-bg">
      <%= render 'header' %>
      <div class="home-content wrapper">
        <!--        <p class="catch">なに書こう..</p>-->
        <div class="ticker" rel="roll">
          <ul>
            <li>HTML & CSS</li>
            <li>Ruby</li>
            <li>Ruby on Rails</li>
            <li>Javascript</li>
<!--            <li>Bob</li>-->
          </ul>
        </div><!--/.ticker-->

        <h2 class="page-title" data-in-effect="fadeInDown" data-in-shuffle="true"><span>KOUHEI ENDO</span></h2>
        <a class="button" href="/index/folio">Look PortFolio</a>
      </div>
    </div>
  </div>
</main>
<script src="https://apps.bdimg.com/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lettering.js/0.7.0/jquery.lettering.js"></script>
<script>
  jQuery(function ($) {
    "use strict";

    function isInEffect(effect) {
      return /In/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.inEffects) >= 0;
    };

    function isOutEffect(effect) {
      return /Out/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.outEffects) >= 0;
    };


    function stringToBoolean(str) {
      if (str !== "true" && str !== "false") return str;
      return (str === "true");
    };

    // custom get data api method
    function getData(node) {
      let attrs = node.attributes || []
        , data = {};

      if (!attrs.length) return data;

      $.each(attrs, function (i, attr) {
        var nodeName = attr.nodeName.replace(/delayscale/, 'delayScale');
        if (/^data-in-*/.test(nodeName)) {
          data.in = data.in || {};
          data.in[nodeName.replace(/data-in-/, '')] = stringToBoolean(attr.nodeValue);
        } else if (/^data-out-*/.test(nodeName)) {
          data.out = data.out || {};
          data.out[nodeName.replace(/data-out-/, '')] = stringToBoolean(attr.nodeValue);
        } else if (/^data-*/.test(nodeName)) {
          data[nodeName.replace(/data-/, '')] = stringToBoolean(attr.nodeValue);
        }
      })

      return data;
    }

    function shuffle(o) {
      for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) ;
      return o;
    }

    function animate($t, effect, cb) {
      $t.addClass('animated ' + effect)
        .css('visibility', 'visible')
        .show();

      $t.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
        $t.removeClass('animated ' + effect);
        cb && cb();
      });
    }

    function animateTokens($tokens, options, cb) {
      var that = this
        , count = $tokens.length;

      if (!count) {
        cb && cb();
        return;
      }

      if (options.shuffle) $tokens = shuffle($tokens);
      if (options.reverse) $tokens = $tokens.toArray().reverse();

      $.each($tokens, function (i, t) {
        var $token = $(t);

        function complete() {
          if (isInEffect(options.effect)) {
            $token.css('visibility', 'visible');
          } else if (isOutEffect(options.effect)) {
            $token.css('visibility', 'hidden');
          }
          count -= 1;
          if (!count && cb) cb();
        }

        var delay = options.sync ? options.delay : options.delay * i * options.delayScale;

        $token.text() ?
          setTimeout(function () {
            animate($token, options.effect, complete)
          }, delay) :
          complete();
      });
    };

    let Textillate = function (element, options) {
      var base = this
        , $element = $(element);

      base.init = function () {
        base.$texts = $element.find(options.selector);

        if (!base.$texts.length) {
          base.$texts = $('<ul class="texts"><li>' + $element.html() + '</li></ul>');
          $element.html(base.$texts);
        }

        base.$texts.hide();

        base.$current = $('<span>')
          .html(base.$texts.find(':first-child').html())
          .prependTo($element);

        if (isInEffect(options.in.effect)) {
          base.$current.css('visibility', 'hidden');
        } else if (isOutEffect(options.out.effect)) {
          base.$current.css('visibility', 'visible');
        }

        base.setOptions(options);

        base.timeoutRun = null;

        setTimeout(function () {
          base.options.autoStart && base.start();
        }, base.options.initialDelay)
      };

      base.setOptions = function (options) {
        base.options = options;
      };

      base.triggerEvent = function (name) {
        var e = $.Event(name + '.catch,.page-title');
        $element.trigger(e, base);
        return e;
      };

      base.in = function (index, cb) {
        index = index || 0;

        var $elem = base.$texts.find(':nth-child(' + ((index || 0) + 1) + ')')
          , options = $.extend(true, {}, base.options, $elem.length ? getData($elem[0]) : {})
          , $tokens;

        $elem.addClass('current');

        base.triggerEvent('inAnimationBegin');

        base.$current
          .html($elem.html())
          .lettering('words');

        // split words to individual characters if token type is set to 'char'
        if (base.options.type == "char") {
          base.$current.find('[class^="word"]')
            .css({
              'display': 'inline-block',
              // fix for poor ios performance
              '-webkit-transform': 'translate3d(0,0,0)',
              '-moz-transform': 'translate3d(0,0,0)',
              '-o-transform': 'translate3d(0,0,0)',
              'transform': 'translate3d(0,0,0)'
            })
            .each(function () {
              $(this).lettering()
            });
        }

        $tokens = base.$current
          .find('[class^="' + base.options.type + '"]')
          .css('display', 'inline-block');

        if (isInEffect(options.in.effect)) {
          $tokens.css('visibility', 'hidden');
        } else if (isOutEffect(options.in.effect)) {
          $tokens.css('visibility', 'visible');
        }

        base.currentIndex = index;

        animateTokens($tokens, options.in, function () {
          base.triggerEvent('inAnimationEnd');
          if (options.in.callback) options.in.callback();
          if (cb) cb(base);
        });
      };

      base.out = function (cb) {
        var $elem = base.$texts.find(':nth-child(' + ((base.currentIndex || 0) + 1) + ')')
          , $tokens = base.$current.find('[class^="' + base.options.type + '"]')
          , options = $.extend(true, {}, base.options, $elem.length ? getData($elem[0]) : {})

        base.triggerEvent('outAnimationBegin');

        animateTokens($tokens, options.out, function () {
          $elem.removeClass('current');
          base.triggerEvent('outAnimationEnd');
          if (options.out.callback) options.out.callback();
          if (cb) cb(base);
        });
      };

      base.start = function (index) {
        setTimeout(function () {
          base.triggerEvent('start');

          (function run(index) {
            base.in(index, function () {
              var length = base.$texts.children().length;

              index += 1;

              if (!base.options.loop && index >= length) {
                if (base.options.callback) base.options.callback();
                base.triggerEvent('end');
              } else {
                index = index % length;

                base.timeoutRun = setTimeout(function () {
                  base.out(function () {
                    run(index)
                  });
                }, base.options.minDisplayTime);
              }
            });
          }(index || 0));
        }, base.options.initialDelay);
      };

      base.stop = function () {
        if (base.timeoutRun) {
          clearInterval(base.timeoutRun);
          base.timeoutRun = null;
        }
      };

      base.init();
    }

    $.fn.textillate = function (settings, args) {
      return this.each(function () {
        var $this = $(this)
          , data = $this.data('textillate')
          ,
          options = $.extend(true, {}, $.fn.textillate.defaults, getData(this), typeof settings == 'object' && settings);

        if (!data) {
          $this.data('textillate', (data = new Textillate(this, options)));
        } else if (typeof settings == 'string') {
          data[settings].apply(data, [].concat(args));
        } else {
          data.setOptions.call(data, options);
        }
      })
    };

    $.fn.textillate.defaults = {
      selector: '.texts',
      loop: false,
      minDisplayTime: 2000,
      initialDelay: 0,
      in: {
        effect: 'fadeInLeftBig',
        delayScale: 1.5,
        delay: 150,
        sync: false,
        reverse: false,
        shuffle: false,
        callback: function () {
        }
      },
      out: {
        effect: 'hinge',
        delayScale: 1.5,
        delay: 50,
        sync: false,
        reverse: false,
        shuffle: false,
        callback: function () {
        }
      },
      autoStart: true,
      inEffects: [],
      outEffects: ['hinge'],
      callback: function () {
      },
      type: 'char'
    };

  }(jQuery));

  jQuery(function ($) {
    $('.catch,.page-title').textillate();
  });
</script>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script>
  $(function () {
    $(window).on('load', function () {
      var $setElm = $('.ticker');
      var effectSpeed = 1000;
      var switchDelay = 5000;
      var easing = 'swing';

      $setElm.each(function () {
        var effectFilter = $(this).attr('rel'); // 'fade' or 'roll' or 'slide'

        var $targetObj = $(this);
        var $targetUl = $targetObj.children('ul');
        var $targetLi = $targetObj.find('li');
        var $setList = $targetObj.find('li:first');

        var ulWidth = $targetUl.width();
        var listHeight = $targetLi.height();
        $targetObj.css({height: (listHeight)});
        $targetLi.css({top: '0', left: '0', position: 'absolute'});

        var liCont = $targetLi.length;

        if (effectFilter == 'fade') {
          $setList.css({
            display: 'block',
            opacity: '0',
            zIndex: '98'
          }).stop().animate({opacity: '1'}, effectSpeed, easing).addClass('showlist');
          if (liCont > 1) {
            setInterval(function () {
              var $activeShow = $targetObj.find('.showlist');
              $activeShow.animate({opacity: '0'}, effectSpeed, easing, function () {
                $(this).next().css({
                  display: 'block',
                  opacity: '0',
                  zIndex: '99'
                }).animate({opacity: '1'}, effectSpeed, easing).addClass('showlist').end().appendTo($targetUl).css({
                  display: 'none',
                  zIndex: '98'
                }).removeClass('showlist');
              });
            }, switchDelay);
          }
        } else if (effectFilter == 'roll') {
          $setList.css({top: '3em', display: 'block', opacity: '0', zIndex: '98'}).stop().animate({
            top: '0',
            opacity: '1'
          }, effectSpeed, easing).addClass('showlist');
          if (liCont > 1) {
            setInterval(function () {
              var $activeShow = $targetObj.find('.showlist');
              $activeShow.animate({top: '-3em', opacity: '0'}, effectSpeed, easing).next().css({
                top: '3em',
                display: 'block',
                opacity: '0',
                zIndex: '99'
              }).animate({
                top: '0',
                opacity: '1'
              }, effectSpeed, easing).addClass('showlist').end().appendTo($targetUl).css({zIndex: '98'}).removeClass('showlist');
            }, switchDelay);
          }
        } else if (effectFilter == 'slide') {
          $setList.css({left: (ulWidth), display: 'block', opacity: '0', zIndex: '98'}).stop().animate({
            left: '0',
            opacity: '1'
          }, effectSpeed, easing).addClass('showlist');
          if (liCont > 1) {
            setInterval(function () {
              var $activeShow = $targetObj.find('.showlist');
              $activeShow.animate({left: (-(ulWidth)), opacity: '0'}, effectSpeed, easing).next().css({
                left: (ulWidth),
                display: 'block',
                opacity: '0',
                zIndex: '99'
              }).animate({
                left: '0',
                opacity: '1'
              }, effectSpeed, easing).addClass('showlist').end().appendTo($targetUl).css({zIndex: '98'}).removeClass('showlist');
            }, switchDelay);
          }
        }
      });
    });
  });
</script>